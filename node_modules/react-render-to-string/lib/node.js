import { EventEmitter } from "events";
import { renderToPipeableStream } from "react-dom/server";
export default function renderToString(element) {
    return new Promise((resolve, reject) => {
        const stream = renderToPipeableStream(element, {
            onError(err) {
                reject(err);
            },
            onAllReady() {
                stream.pipe(new StreamReader((html) => {
                    resolve(stripComments(html));
                }));
            },
        });
    });
}
function stripComments(html) {
    return html.replace(/<!--[\s\S]*?(?:-->)/g, "");
}
/**
 * Naive WriteableStream implementation that captures chunks in memory
 * ands invokes a callback with the concatenated result as utf8 string
 * once the end of the stream is signaled.
 */
export class StreamReader extends EventEmitter {
    constructor(cb) {
        super();
        this.cb = cb;
        this.writable = true;
        this.chunks = [];
    }
    write(chunk) {
        this.chunks.push(Buffer.from(chunk));
        return true;
    }
    end() {
        this.cb(Buffer.concat(this.chunks).toString("utf8"));
        return this;
    }
}
