import * as fs from "fs";
import * as path from "path";
import urlJoin from "url-join";
import { getLinks } from "./html.js";
import { polyfillWebAPIs } from "./polyfills.js";
async function getStaticPaths(prerender) {
    if (prerender === false)
        return [];
    if (typeof prerender === "string")
        return [prerender];
    if (Array.isArray(prerender))
        return prerender;
    return getStaticPaths(await prerender());
}
export async function renderStaticPages({ ssrBundle, createIndexFiles, outDir, base, prerender, followLinks, }) {
    await polyfillWebAPIs();
    const { default: ssrModule } = await import(ssrBundle);
    // REVISIT When ssr.format is set to "cjs" we end up with default.default:
    const ssr = ssrModule.default ?? ssrModule;
    const seen = new Set((await getStaticPaths(prerender)).map((s) => urlJoin(base, s)));
    const urls = [...seen];
    for (const url of urls) {
        const html = await ssr(url);
        const fileName = urlToFileName(url, createIndexFiles, base);
        const dest = path.join(outDir, fileName);
        fs.mkdirSync(path.dirname(dest), { recursive: true });
        fs.writeFileSync(dest, html);
        if (followLinks) {
            const follow = typeof followLinks === "function" ? followLinks : Boolean;
            const links = getLinks(html).filter(follow);
            for (const link of links) {
                if (!seen.has(link)) {
                    seen.add(link);
                    urls.push(link);
                }
            }
        }
    }
    return urls;
}
export function urlToFileName(url, extraDir, base) {
    let file = stripTrailingSlash(url);
    base = stripTrailingSlash(base);
    if (base && file.startsWith(base))
        file = file.slice(base.length);
    file = stripLeadingSlash(file);
    if (!file)
        return "index.html";
    if (file.includes(".html"))
        return file;
    return `${file}${extraDir ? "/index.html" : ".html"}`;
}
function stripLeadingSlash(s) {
    return s.replace(/^\//, "");
}
function stripTrailingSlash(s) {
    return s.replace(/\/$/, "");
}
