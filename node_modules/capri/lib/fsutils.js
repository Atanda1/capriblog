import fs from "fs";
import path from "path";
export function exists(file) {
    return fs.existsSync(file);
}
export function mkdir(dir) {
    try {
        fs.mkdirSync(dir, { recursive: true });
    }
    catch (err) {
        if (err.code === "EEXIST")
            return;
        throw err;
    }
}
export function rm(path) {
    fs.rmSync(path, { force: true, recursive: true });
}
export function copy(source, target, opts = {}) {
    if (!exists(source))
        return [];
    const files = [];
    const prefix = posixify(target) + "/";
    const regex = opts.replace
        ? new RegExp(`(${Object.keys(opts.replace).map(escapeRegex).join("|")})`, "g")
        : null;
    function go(from, to) {
        if (opts.filter && !opts.filter(path.basename(from)))
            return;
        const stats = fs.statSync(from);
        if (stats.isDirectory()) {
            fs.readdirSync(from).forEach((file) => {
                go(path.join(from, file), path.join(to, file));
            });
        }
        else {
            mkdir(path.dirname(to));
            if (regex && opts.replace) {
                const data = read(from);
                fs.writeFileSync(to, data.replace(regex, (match, key) => opts.replace?.[key] ?? ""));
            }
            else {
                fs.copyFileSync(from, to);
            }
            files.push(to === target
                ? posixify(path.basename(to))
                : posixify(to).replace(prefix, ""));
        }
    }
    go(source, target);
    return files;
}
export function read(file) {
    return fs.readFileSync(file, "utf8");
}
export function write(file, data) {
    try {
        fs.mkdirSync(path.dirname(file), { recursive: true });
    }
    catch {
        // ignore
    }
    fs.writeFileSync(file, data);
}
function escapeRegex(str) {
    return str.replace(/[-/\\^$*+?.()|[\]{}]/g, "\\$&");
}
function posixify(str) {
    return str.split(path.sep).join(path.posix.sep);
}
