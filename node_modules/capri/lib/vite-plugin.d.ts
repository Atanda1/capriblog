import type { ConfigEnv, Plugin, SSROptions, UserConfig } from "vite";
import { BundleOptions } from "./bundle.js";
import * as fsutils from "./fsutils.js";
import { FollowLinksConfig, PrerenderConfig } from "./prerender.js";
export interface Wrapper {
    server?: string;
    client?: string;
    spa?: string;
}
export interface Adapter {
    hydrate: string;
    island: Wrapper;
    lagoon: Wrapper;
    injectWrapper?: "onLoad" | "onTransform";
}
export interface BuildArgs {
    rootDir: string;
    outDir: string;
    ssrBundle: string;
    prerendered: string[];
    fsutils: typeof fsutils;
    bundle: (input: string, output: string, options?: BundleOptions) => Promise<void>;
}
interface ViteConfig extends UserConfig {
    ssr?: SSROptions;
}
export interface BuildTarget {
    config?: (config: ViteConfig, env: ConfigEnv) => ViteConfig | null | void | Promise<ViteConfig | null | void>;
    build: (args: BuildArgs) => Promise<void>;
}
export interface CapriPluginOptions {
    createIndexFiles?: boolean;
    prerender?: PrerenderConfig;
    followLinks?: FollowLinksConfig;
    islandGlobPattern?: string;
    lagoonGlobPattern?: string;
    templateProcessing?: "parser" | "regexp";
    adapter: Adapter;
    target?: BuildTarget;
    spa?: string | false;
}
export declare type CapriAdapterPluginOptions = Omit<CapriPluginOptions, "adapter">;
export declare function capri({ createIndexFiles, prerender, followLinks, islandGlobPattern, lagoonGlobPattern, templateProcessing, adapter, target, spa, }: CapriPluginOptions): Plugin[];
export declare function isServerEntryScript(config: UserConfig): boolean;
export {};
